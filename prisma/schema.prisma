generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Boat {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  model          String?
  year           Int?
  hullId         String?
  coverImageUrl  String?
  notes          String?
  publicId       String          @unique @default(cuid())
  ownerId        String?         @db.ObjectId
  owner          Owner?          @relation(fields: [ownerId], references: [id])
  images         BoatImage[]
  services       ServiceEntry[]
  invoices       Invoice[]
  customerNotes  CustomerNote[]
}

model Owner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String?
  phone     String?
  address   String?
  boats     Boat[]
}

model BoatImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  url       String
  caption   String?
  sortOrder Int      @default(0)
  boatId    String   @db.ObjectId
  boat      Boat     @relation(fields: [boatId], references: [id])
}

enum ServiceStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  INVOICED
}

model ServiceEntry {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime?
  status        ServiceStatus  @default(PLANNED)
  hourlyRate    Float?
  materialsCost Float?
  internalNote  String?
  boatId        String         @db.ObjectId
  boat          Boat           @relation(fields: [boatId], references: [id])
  invoiceId     String?        @db.ObjectId
  invoice       Invoice?       @relation(fields: [invoiceId], references: [id])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

model Invoice {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reference      String          @unique
  issuedAt       DateTime        @default(now())
  dueAt          DateTime?
  status         InvoiceStatus   @default(DRAFT)
  notes          String?
  adminMemo      String?
  totalHours     Float
  totalAmount    Float
  laborTotal     Float
  materialsTotal Float
  boatId         String          @db.ObjectId
  boat           Boat            @relation(fields: [boatId], references: [id])
  services       ServiceEntry[]
}

enum CustomerNoteType {
  ISSUE
  REQUEST
  INFO
}

model CustomerNote {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime         @default(now())
  noteType     CustomerNoteType @default(INFO)
  message      String
  customerName String?
  contact      String?
  isResolved   Boolean          @default(false)
  boatId       String           @db.ObjectId
  boat         Boat             @relation(fields: [boatId], references: [id])
}
